
$ ls -la file
-rw-rw-r--. 1 chale users 12 Jun 10 16:46 file
^+--------+ ^   ^     ^    ^ +----------+  ^
|    |      |   |     |    |      |        |
|    |      |   |     |    |      |        +--> Name
|    |      |   |     |    |      +-----------> mtime
|    |      |   |     |    +------------------> size (in bytes)
|    |      |   |     +-----------------------> group
|    |      |   +-----------------------------> owner
|    |      +---------------------------------> link count
|    +----------------------------------------> permissions
+---------------------------------------------> file type

File Type

There are several different types of files in UNIX.  The most common
are the regular file and the directory.  Others include named named pipes,
devices, and symbolic links.

- - Regular File
d - Directory
c - Device file
l - Symbolic Links
p - Named Pipe
There are more, see the info pages for ls.

Permissions

rwx rwx rwx .
 ^   ^   ^  ^
 |   |   |  |
 |   |   |  +---> Extended Attribute Flag
 |   |   +------> World permissions
 |   +----------> Group Permissions
 +--------------> User Permissions

Traditional UNIX (aka POSIX) permissions are divided into three sets.
Applying to the file owner, group owner, and everyone else.  These are
refered to as "bit", because internally the are stored as a bit vector.

r - Read
w - Write
x - eXecute

Certain file systems support "Extended Attributes", which provide more
sophisticated permissions (e.g. ACLs).  These are rarely used.  See acl(5)

The meaning of the posix permissions depend on the file type.  

For files and most other types, read and write refer to the the
contents and the metadata.  Execute causes the shell think the program
is an executable program.

For directories, read and write mean access to the directory's table
of contents.  This implies the ability to delete*.  The execute bit is
required to be able to list the table of contents in it's entirety.
Without the execute bit, the user must know the path to the file, in
order to access it.

Besides, read, write, and execute, there are a set of other bits that
control some additional behavior.

setuid: 
This only applies to executable files.  If this bit is set, then when
executed, the process will be run as the owner.  So, a setuid
executable owned by root, will be run as root when the invoking user
is different.

setgid:  
For executable files, this operates like the setuid bit, but for the group.

For directories, this causes newly created files to be owned by the
primary group of the directory, rather than the primary group of the
creating user.

sticky bit:
For directories, this alters the behavior of the write permission.
Normally, if a user has write permissions to a directory, a user can
move, delete files even if that user is not the file's owner.  This
changes the behavior, so a user can only move, or delete files they
own.

The high bits don't have a dedicated column in the ls(1) display.
Instead, they are overlayed on top of the execute bits.

-rwsrwsrwt.
   ^  ^  ^
   |  |  +----> Sticky bit and execute bit set
   |  +-------> Setgid bit and execute bit set
   +----------> Setuid bit and execute bit set

If the execute bit is not set, then a capital S or T is used.

Permissions are often represented as octal digits:

1777 = rwxrwxrwt

For each column:
Binary 100 = Octal 4 = read or setuid
Binary 010 = Octal 2 = write or setgid
Binary 001 = Octal 1 = execute or sticky

Therefore, 
Binary 110 = Octal 6 = read and write (or setuid and setgid)

* Deleting a file, does not guarantee removal, it just removes it from
  the directory's table of contents.  If the link count is >1, then
  the file is still referenced somewhere else on the system.  If the
  link count is 1, then the Kernel will mark space belonging to the
  file as unused.  What happens after that is largely dependant on the
  underlying filesystem type.

Link Count

Each file on the filesystem is represented by a unique "inode" number.
For regular files and some other file types (but NEVER directories), a
unique file may be represented in multiple locations within the file
system hierarchy.  Each place a file is referenced is called a link or
a hard link.  This is not to be confused with a Symbolic, or "soft",
link.

The link count is the total number of hard links to a particular inode
associated to the file.  For most files, the link count will be 1
which indicates that the file is the only representation of the inode
on the system.

User - The user that owns the file.  Can be changed with the chown(1) command.

Group - The group that owns the file.  Can be changed with the chgrp(1) command

Size - By default, this is in bytes

Date - By default, this is mtime, see below

There are several dates associated with a file, depending on the file
system in use.  The standard ones are:
ctime - Last Change Time
mtime - Last Modify Time
atime - Last Access Time

Change time is updated when any metadata (e.g. permissions) or data
(i.e. file's content) of the file is changed.

Modify Time is updated when the file's contents are changed.

Access Time is updated when the file is accessed.  This is often
turned off for performance reasons.

As a result, there is no way to tell when a file was created.

----------------------------------------
In addition to ls(1), the stat(1) command can provide a lot of information.
        
The stat command:
$ stat file
  File: ‘file’
  Size: 17        	Blocks: 8          IO Block: 4096   regular file
Device: fd02h/64770d	Inode: 11347059    Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   chale)   Gid: ( 1000/   chale)
Context: unconfined_u:object_r:user_home_t:s0
Access: 2015-06-10 17:10:46.399198246 -0400
Modify: 2015-06-10 17:12:09.698607892 -0400
Change: 2015-06-10 17:12:09.698607892 -0400
 Birth: -
